var log = console.log;
var dir = console.dir;

Element.prototype.setAttributes = function(attrs) {
	for (var attr in attrs)
		this.setAttribute(attr, attrs[attr]);
	return this;
};

Object.prototype.setParams = function(attrs) {
	for (var attr in attrs)
		this[attr] = attrs[attr];
	return this;
};

Object.prototype.forEach = function(f) {
	for (var param in this)
		if (f(this, param))
			return param;
};

HTMLDocument.prototype.createElementWA = function(tegName, attrs = {}) {
	return document.createElement(tegName).setAttributes(attrs);
};

Node.prototype.appendChilds = function() {
	var res = [this];
	for (var arg of arguments) {
		this.appendChild(arg);
		res.push(arg);
	}
	return res;
};

/* =========== */
/* HTMLElement */
/* =========== */

Object.defineProperty(HTMLElement.prototype, "absoluteOffset", {
	get : function () {
		var res = {
			left: this.offsetLeft,
			top: this.offsetTop
		};
		for (var el = this.offsetParent; el; el = el.offsetParent) {
			res.left += el.offsetLeft;
			res.top += el.offsetTop;
		}
		return res;
	}
});

Object.defineProperty(HTMLElement.prototype, "absoluteOffsetLeft", {
	get : function () {
		return this.absoluteOffset.left;
	}
});

Object.defineProperty(HTMLElement.prototype, "absoluteOffsetTop", {
	get : function () {
		return this.absoluteOffset.top;
	}
});

/* ===================== */
/* HTMLElement.classList */
/* ===================== */

HTMLElement.prototype.addClassName = function() {
	for (var arg of arguments)
		this.classList.add(arg);
	return this;
};

HTMLElement.prototype.removeClassName = function() {
	for (var arg of arguments)
		this.classList.remove(arg);
	return this;
};

HTMLElement.prototype.containsClassName = function(className) {
	return this.classList.contains(className);
};

HTMLElement.prototype.replaceClassName = function(oldClassName, newClassName) {
	this.classList.replace(oldClassName, newClassName);
	return this;
};

/* ===== */
/* other */
/* ===== */

const __ids = {};
function id(id) {
	if (__ids[id])
		return __ids[id];
	return __ids[id] = document.getElementById(id);
}

function limit(n, min, max) {
	if (n < min)
		return min;
	else if (n > max)
		return max;
	return n;
}

// if (!inRange(n, min + 1, max - 1))
function inRange(n, min, max) {
	return min <= n && n <= max;
}

function getParams(obj) {
	var res = [];
	for (var i = 1; i < arguments.length; i++)
		res[arguments[i]] = obj[arguments[i]];
	return res;
}

Object.prototype.matchParams = function(str) {
	var res = {};
	for (var param in this)
		if (new RegExp(`${str}`, "i").test(param))
			res[param] = this[param];
	return res;
};

function testSpeed(testTimeSec, f) {
	var endTimeSec = Date.now() + testTimeSec * 1000;
	for (var i = 0; endTimeSec > Date.now(); i++)
		f();
	log({func: f, timesPerSec: i / testTimeSec, res: f()});
}
